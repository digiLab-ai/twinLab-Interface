import io
from unittest.mock import patch

import pandas as pd

import twinlab as tl

# Define the expected output
EXPECTED_RESULT = pd.DataFrame(
    [
        [0.0, 0.0],
        [0.0, 0.0],
        [0.0, 0.0],
        [0.0, 0.0],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 0.3333333333333333],
        [0.0, 1.0],
        [0.0, 1.0],
        [0.0, 1.0],
        [0.0, 1.0],
        [0.0, 1.0],
        [0.0, 1.0],
        [0.0, 1.0],
        [0.0, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.3333333333333333, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [0.6666666666666666, 1.0],
        [1.0, 1.0],
    ],
    columns=["Number of packs sold", "Profit [GBP]"],
)


@patch("twinlab.client._use_campaign")
def test_get_calibration_curve_use(mock_use_campaign):
    """
    Test for tl.client.get_calibration_curve()

    Requirements
    ------------
        method calls _use_campaign
    """

    mock_use_campaign.return_value = io.StringIO(EXPECTED_RESULT.to_csv(index=False))

    _ = tl.client.get_calibration_curve_campaign(
        campaign_id="get_calibration_curve",
        processor="cpu",
        verbose=False,
        debug=False,
    )

    mock_use_campaign.assert_called_once()


@patch("twinlab.client._use_campaign")
def test_get_calibration_curve_campaign_out(mock_use_campaign):
    """
    Test for tl.client.get_calibration_curve()

    Requirements
    ------------
        method returns the correct (self-defined) list
    """

    mock_use_campaign.return_value = io.StringIO(EXPECTED_RESULT.to_csv(index=False))

    result_df = tl.client.get_calibration_curve_campaign(
        campaign_id="get_calibration_curve",
        processor="cpu",
        verbose=False,
        debug=False,
    )

    # result_df = pd.DataFrame(result, columns=["Number of packs sold", "Profit [GBP]"])
    pd.testing.assert_frame_equal(result_df, EXPECTED_RESULT)
